//
// Created by rewbycraft on 3/13/19.
//

#include <parser/internal.h>
#include <parser/ospf/OSPFv3Packet.h>
#include "gtest/gtest.h"

TEST(ParserTest, ReconstructHelloTest1) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x89, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x01};
	parser::OSPFv3Packet packet(data);
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructHelloTest2) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02};
	parser::OSPFv3Packet packet(data);
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructHelloTest3) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x89, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x01};
	parser::OSPFv3Packet packet(data);
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructLSUTest1) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0x6c, 0x01, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x4e, 0xdb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x01, 0x80, 0x00, 0x00, 0x04, 0x09, 0x53, 0x00, 0x58, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x14, 0x01, 0x01, 0x02, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x18, 0x01, 0x01, 0x02, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x1b, 0x01, 0x01, 0x03, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x26, 0x01, 0x01, 0x06, 0x01};
	parser::OSPFv3Packet packet(data);
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructLSUTest2) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0x7c, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0xc5, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x04, 0x8e, 0x66, 0x00, 0x68, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x03, 0xe8, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x0c, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x03, 0xe8, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x10, 0x01, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x12, 0x01, 0x01, 0x02, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x17, 0x01, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x19, 0x01, 0x01, 0x03, 0x02};
	parser::OSPFv3Packet packet(data);
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructLSUTest3) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0x7c, 0x01, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0xdd, 0x2b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01, 0x80, 0x00, 0x00, 0x02, 0x7c, 0xa1, 0x00, 0x68, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0a, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x0e, 0x01, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x11, 0x01, 0x01, 0x02, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x13, 0x01, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x15, 0x01, 0x01, 0x03, 0x02};
	parser::OSPFv3Packet packet(data);
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructLSAckTest1) {
	parser::bytevector data = {0x03, 0x05, 0x00, 0x24, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x6a, 0xef, 0x00, 0x00, 0x00, 0x01, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x01, 0x80, 0x00, 0x00, 0x04, 0x09, 0x53, 0x00, 0x58};
	parser::OSPFv3Packet packet(data);
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructLSAckTest2) {
	parser::bytevector data = {0x03, 0x05, 0x00, 0x4c, 0x01, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0xd5, 0xd2, 0x00, 0x00, 0x00, 0x01, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x04, 0x8e, 0x66, 0x00, 0x68, 0x00, 0x02, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x80, 0x00, 0x00, 0x04, 0x23, 0x4c, 0x00, 0x38, 0x00, 0x02, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x80, 0x00, 0x00, 0x04, 0xa7, 0xd8, 0x00, 0x38};
	parser::OSPFv3Packet packet(data);
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}
