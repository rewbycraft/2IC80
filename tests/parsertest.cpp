#pragma clang diagnostic push
#pragma ide diagnostic ignored "cert-err58-cpp"
//
// Created by rewbycraft on 3/13/19.
//

#include <parser/internal.h>
#include <parser/ospf/OSPFv3Packet.h>
#include "gtest/gtest.h"

TEST(ParserTest, ReconstructHelloTest1) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x89, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x01};
	parser::OSPFv3Packet packet(data);
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructHelloTest2) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructHelloTest3) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x89, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x01};
	parser::OSPFv3Packet packet(data);
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructLSUTest1) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0x6c, 0x01, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x4e, 0xdb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x01, 0x80, 0x00, 0x00, 0x04, 0x09, 0x53, 0x00, 0x58, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x14, 0x01, 0x01, 0x02, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x18, 0x01, 0x01, 0x02, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x1b, 0x01, 0x01, 0x03, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x26, 0x01, 0x01, 0x06, 0x01};
	parser::OSPFv3Packet packet(data);
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructLSUTest2) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0x7c, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0xc5, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x04, 0x8e, 0x66, 0x00, 0x68, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x03, 0xe8, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x0c, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x03, 0xe8, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x10, 0x01, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x12, 0x01, 0x01, 0x02, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x17, 0x01, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x19, 0x01, 0x01, 0x03, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructLSUTest3) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0x7c, 0x01, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0xdd, 0x2b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01, 0x80, 0x00, 0x00, 0x02, 0x7c, 0xa1, 0x00, 0x68, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0a, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x0e, 0x01, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x11, 0x01, 0x01, 0x02, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x13, 0x01, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x15, 0x01, 0x01, 0x03, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructLSAckTest1) {
	parser::bytevector data = {0x03, 0x05, 0x00, 0x24, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x6a, 0xef, 0x00, 0x00, 0x00, 0x01, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x01, 0x80, 0x00, 0x00, 0x04, 0x09, 0x53, 0x00, 0x58};
	parser::OSPFv3Packet packet(data);
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstrucstLSAckTest2) {
	parser::bytevector data = {0x03, 0x05, 0x00, 0x4c, 0x01, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0xd5, 0xd2, 0x00, 0x00, 0x00, 0x01, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x04, 0x8e, 0x66, 0x00, 0x68, 0x00, 0x02, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x80, 0x00, 0x00, 0x04, 0x23, 0x4c, 0x00, 0x38, 0x00, 0x02, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x80, 0x00, 0x00, 0x04, 0xa7, 0xd8, 0x00, 0x38};
	parser::OSPFv3Packet packet(data);
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest1) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x24, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x6b, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,10431855162518248275u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest2) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x24, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0xe3, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,4081570780723689266u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest3) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x24, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x29, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,5510013406568449447u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest4) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x24, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0xda, 0xaf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,8940765662646544802u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest5) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x24, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x3e, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,14746967710560628462u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest6) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x24, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x9f, 0xd2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,2908403968511342810u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest7) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x24, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x05, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,4635624585554864598u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest8) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,2067413912700624769u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest9) {
	parser::bytevector data = {0x03, 0x02, 0x00, 0x1c, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x55, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x01, 0x13, 0x05, 0xdc, 0x00, 0x07, 0x1d, 0xfc, 0xbb, 0x28};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,8940765662646544802u));
	packet.setDest(std::make_uint128(18338657682652659712u,2067413912700624769u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest10) {
	parser::bytevector data = {0x03, 0x02, 0x00, 0x1c, 0x01, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x24, 0x8a, 0x00, 0x00, 0x00, 0x00, 0x01, 0x13, 0x05, 0xdc, 0x00, 0x07, 0x90, 0xc0, 0x77, 0xf8};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,2067413912700624769u));
	packet.setDest(std::make_uint128(18338657682652659712u,8940765662646544802u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest11) {
	parser::bytevector data = {0x03, 0x02, 0x00, 0x58, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x41, 0x00, 0x00, 0x00, 0x00, 0x01, 0x13, 0x05, 0xdc, 0x00, 0x00, 0x90, 0xc0, 0x77, 0xf8, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x01, 0x0e, 0x1b, 0x00, 0x18, 0x00, 0x00, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x01, 0x11, 0x0d, 0x00, 0x84, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x18, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x01, 0x21, 0x9b, 0x00, 0x40};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,8940765662646544802u));
	packet.setDest(std::make_uint128(18338657682652659712u,2067413912700624769u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest12) {
	parser::bytevector data = {0x03, 0x02, 0x01, 0x48, 0x01, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0xeb, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x01, 0x13, 0x05, 0xdc, 0x00, 0x01, 0x90, 0xc0, 0x77, 0xf9, 0x04, 0x82, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x01, 0x80, 0x00, 0x00, 0x06, 0xff, 0x05, 0x00, 0x48, 0x04, 0xa8, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x01, 0x80, 0x00, 0x00, 0x04, 0xa2, 0xb6, 0x00, 0x70, 0x04, 0xae, 0x00, 0x08, 0x00, 0x00, 0x00, 0x17, 0x01, 0x01, 0x03, 0x01, 0x80, 0x00, 0x00, 0x03, 0x1c, 0x70, 0x00, 0x40, 0x04, 0x82, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01, 0x80, 0x00, 0x00, 0x06, 0x4d, 0x6b, 0x00, 0x58, 0x04, 0xa9, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01, 0x80, 0x00, 0x00, 0x04, 0xe1, 0x4e, 0x00, 0x84, 0x04, 0x82, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x80, 0x00, 0x00, 0x06, 0x35, 0x5a, 0x00, 0x28, 0x04, 0xaa, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x80, 0x00, 0x00, 0x04, 0x0f, 0x98, 0x00, 0x48, 0x04, 0x83, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x80, 0x00, 0x00, 0x06, 0xba, 0xdd, 0x00, 0x28, 0x04, 0xaa, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x80, 0x00, 0x00, 0x04, 0x0c, 0x9f, 0x00, 0x48, 0x04, 0xaa, 0x40, 0x05, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x80, 0x00, 0x00, 0x03, 0xf6, 0x84, 0x00, 0x24, 0x04, 0x83, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x02, 0x80, 0x00, 0x00, 0x06, 0xd8, 0x24, 0x00, 0x48, 0x04, 0xaa, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x02, 0x80, 0x00, 0x00, 0x04, 0x42, 0x12, 0x00, 0x70, 0x04, 0x9e, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x06, 0x01, 0x80, 0x00, 0x00, 0x05, 0x86, 0x09, 0x00, 0x38, 0x04, 0xa9, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x06, 0x01, 0x80, 0x00, 0x00, 0x04, 0x04, 0xe4, 0x00, 0x48, 0x04, 0xaf, 0x40, 0x05, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x06, 0x01, 0x80, 0x00, 0x00, 0x03, 0x9e, 0x36, 0x00, 0x2c};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,2067413912700624769u));
	packet.setDest(std::make_uint128(18338657682652659712u,8940765662646544802u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest13) {
	parser::bytevector data = {0x03, 0x03, 0x00, 0x34, 0x01, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0xea, 0xd4, 0x00, 0x00, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x18, 0x01, 0x01, 0x02, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,2067413912700624769u));
	packet.setDest(std::make_uint128(18338657682652659712u,8940765662646544802u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest14) {
	parser::bytevector data = {0x03, 0x02, 0x00, 0x1c, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x25, 0x8f, 0x00, 0x00, 0x00, 0x00, 0x01, 0x13, 0x05, 0xdc, 0x00, 0x00, 0x90, 0xc0, 0x77, 0xf9};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,8940765662646544802u));
	packet.setDest(std::make_uint128(18338657682652659712u,2067413912700624769u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest15) {
	parser::bytevector data = {0x03, 0x03, 0x00, 0xc4, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x5b, 0x00, 0x00, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x01, 0x00, 0x00, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x17, 0x01, 0x01, 0x03, 0x01, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x00, 0x00, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x40, 0x05, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x02, 0x00, 0x00, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x02, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x06, 0x01, 0x00, 0x00, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x06, 0x01, 0x00, 0x00, 0x40, 0x05, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x06, 0x01};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,8940765662646544802u));
	packet.setDest(std::make_uint128(18338657682652659712u,2067413912700624769u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest16) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0xf0, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x5c, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x01, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x01, 0x0e, 0x1b, 0x00, 0x18, 0x02, 0x00, 0x01, 0x13, 0x00, 0x01, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x01, 0x11, 0x0d, 0x00, 0x84, 0x00, 0x05, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x7c, 0x00, 0x03, 0xe8, 0x2a, 0x0b, 0x6b, 0x83, 0x2c, 0x80, 0xff, 0xff, 0x00, 0x00, 0x00, 0xe1, 0x00, 0xc2, 0x00, 0x00, 0x7c, 0x00, 0x03, 0xe8, 0x2a, 0x0b, 0x6b, 0x83, 0x2c, 0x80, 0xff, 0xff, 0x00, 0x00, 0x00, 0xe2, 0x00, 0xc2, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x64, 0x2a, 0x0b, 0x6b, 0x83, 0x2c, 0x80, 0xff, 0xff, 0x00, 0x00, 0x00, 0xc1, 0x00, 0xc2, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x64, 0x2a, 0x0b, 0x6b, 0x83, 0x2c, 0x80, 0xff, 0xff, 0x00, 0x00, 0x00, 0xc2, 0x00, 0xd1, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x64, 0x2a, 0x0b, 0x6b, 0x83, 0x2c, 0x80, 0xff, 0xff, 0x00, 0x00, 0x00, 0xc2, 0x00, 0xd2, 0x00, 0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x18, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x01, 0x21, 0x9b, 0x00, 0x40, 0x01, 0x00, 0x01, 0x13, 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x13, 0xfa, 0xff, 0xfe, 0x0e, 0xa9, 0xa2, 0x00, 0x00, 0x00, 0x01, 0x7c, 0x00, 0x00, 0x00, 0x2a, 0x0b, 0x6b, 0x83, 0x2c, 0x80, 0xff, 0xff, 0x00, 0x00, 0x00, 0xc2, 0x00, 0xd1, 0x00, 0x00};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,8940765662646544802u));
	packet.setDest(std::make_uint128(18338657682652659712u,2067413912700624769u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest17) {
	parser::bytevector data = {0x03, 0x04, 0x04, 0x50, 0x01, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x65, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x04, 0x83, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x01, 0x80, 0x00, 0x00, 0x06, 0xff, 0x05, 0x00, 0x48, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x14, 0x01, 0x01, 0x02, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x1b, 0x01, 0x01, 0x03, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x26, 0x01, 0x01, 0x06, 0x01, 0x04, 0xa9, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x01, 0x80, 0x00, 0x00, 0x04, 0xa2, 0xb6, 0x00, 0x70, 0x00, 0x04, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x01, 0x7c, 0x00, 0x00, 0x64, 0x2a, 0x0b, 0x6b, 0x83, 0x2c, 0x80, 0xff, 0xff, 0x00, 0x00, 0x00, 0xc2, 0x00, 0xd1, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x64, 0x2a, 0x0b, 0x6b, 0x83, 0x2c, 0x80, 0xff, 0xff, 0x00, 0x00, 0x00, 0xc1, 0x00, 0xd1, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x64, 0x2a, 0x0b, 0x6b, 0x83, 0x2c, 0x80, 0xff, 0xff, 0x00, 0x00, 0x00, 0xd1, 0x00, 0xd2, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x64, 0x2a, 0x0b, 0x6b, 0x83, 0x2c, 0x80, 0xff, 0xff, 0x00, 0x00, 0x00, 0xf1, 0x00, 0xd1, 0x00, 0x00, 0x04, 0xaf, 0x00, 0x08, 0x00, 0x00, 0x00, 0x17, 0x01, 0x01, 0x03, 0x01, 0x80, 0x00, 0x00, 0x03, 0x1c, 0x70, 0x00, 0x40, 0x01, 0x00, 0x01, 0x13, 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0xb0, 0xed, 0xff, 0xfe, 0x38, 0x9f, 0x81, 0x00, 0x00, 0x00, 0x01, 0x7c, 0x00, 0x00, 0x00, 0x2a, 0x0b, 0x6b, 0x83, 0x2c, 0x80, 0xff, 0xff, 0x00, 0x00, 0x00, 0xc2, 0x00, 0xd1, 0x00, 0x00, 0x04, 0x83, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01, 0x80, 0x00, 0x00, 0x06, 0x4d, 0x6b, 0x00, 0x58, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x0e, 0x01, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x13, 0x01, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0a, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x15, 0x01, 0x01, 0x03, 0x02, 0x04, 0xaa, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01, 0x80, 0x00, 0x00, 0x04, 0xe1, 0x4e, 0x00, 0x84, 0x00, 0x05, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01, 0x7c, 0x00, 0x00, 0x64, 0x2a, 0x0b, 0x6b, 0x83, 0x2c, 0x80, 0xff, 0xff, 0x00, 0x00, 0x00, 0xe2, 0x00, 0xc1, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x64, 0x2a, 0x0b, 0x6b, 0x83, 0x2c, 0x80, 0xff, 0xff, 0x00, 0x00, 0x00, 0xc1, 0x00, 0xc2, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x64, 0x2a, 0x0b, 0x6b, 0x83, 0x2c, 0x80, 0xff, 0xff, 0x00, 0x00, 0x00, 0xc1, 0x00, 0xd1, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x64, 0x2a, 0x0b, 0x6b, 0x83, 0x2c, 0x80, 0xff, 0xff, 0x00, 0x00, 0x00, 0xe1, 0x00, 0xc1, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x64, 0x2a, 0x0b, 0x6b, 0x83, 0x2c, 0x80, 0xff, 0xff, 0x00, 0x00, 0x00, 0xc1, 0x00, 0xd2, 0x00, 0x00, 0x04, 0x83, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x80, 0x00, 0x00, 0x06, 0x35, 0x5a, 0x00, 0x28, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0d, 0x01, 0x01, 0x02, 0x01, 0x04, 0xab, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x80, 0x00, 0x00, 0x04, 0x0f, 0x98, 0x00, 0x48, 0x00, 0x02, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x7c, 0x00, 0x00, 0x64, 0x2a, 0x0b, 0x6b, 0x83, 0x2c, 0x80, 0xff, 0xff, 0x00, 0x00, 0x00, 0xe2, 0x00, 0xc1, 0x00, 0x00, 0x7c, 0x00, 0x03, 0xe8, 0x2a, 0x0b, 0x6b, 0x83, 0x2c, 0x80, 0xff, 0xff, 0x00, 0x00, 0x00, 0xe2, 0x00, 0xc2, 0x00, 0x00, 0x04, 0x84, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x80, 0x00, 0x00, 0x06, 0xba, 0xdd, 0x00, 0x28, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x09, 0x01, 0x01, 0x02, 0x01, 0x04, 0xab, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x80, 0x00, 0x00, 0x04, 0x0c, 0x9f, 0x00, 0x48, 0x00, 0x02, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x7c, 0x00, 0x03, 0xe8, 0x2a, 0x0b, 0x6b, 0x83, 0x2c, 0x80, 0xff, 0xff, 0x00, 0x00, 0x00, 0xe1, 0x00, 0xc2, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x64, 0x2a, 0x0b, 0x6b, 0x83, 0x2c, 0x80, 0xff, 0xff, 0x00, 0x00, 0x00, 0xe1, 0x00, 0xc1, 0x00, 0x00, 0x04, 0xab, 0x40, 0x05, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x80, 0x00, 0x00, 0x03, 0xf6, 0x84, 0x00, 0x24, 0x04, 0x00, 0x27, 0x10, 0x40, 0x00, 0x00, 0x00, 0x2a, 0x0b, 0x6b, 0x83, 0x2c, 0x80, 0x12, 0x34, 0x04, 0x84, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x02, 0x80, 0x00, 0x00, 0x06, 0xd8, 0x24, 0x00, 0x48, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x16, 0x01, 0x01, 0x02, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x1c, 0x01, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x28, 0x01, 0x01, 0x06, 0x01, 0x04, 0xab, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x02, 0x80, 0x00, 0x00, 0x04, 0x42, 0x12, 0x00, 0x70, 0x00, 0x04, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x02, 0x7c, 0x00, 0x00, 0x64, 0x2a, 0x0b, 0x6b, 0x83, 0x2c, 0x80, 0xff, 0xff, 0x00, 0x00, 0x00, 0xc1, 0x00, 0xd2, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x64, 0x2a, 0x0b, 0x6b, 0x83, 0x2c, 0x80, 0xff, 0xff, 0x00, 0x00, 0x00, 0xd1, 0x00, 0xd2, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x64, 0x2a, 0x0b, 0x6b, 0x83, 0x2c, 0x80, 0xff, 0xff, 0x00, 0x00, 0x00, 0xc2, 0x00, 0xd2, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x64, 0x2a, 0x0b, 0x6b, 0x83, 0x2c, 0x80, 0xff, 0xff, 0x00, 0x00, 0x00, 0xf1, 0x00, 0xd2, 0x00, 0x00, 0x04, 0x9f, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x06, 0x01, 0x80, 0x00, 0x00, 0x05, 0x86, 0x09, 0x00, 0x38, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00, 0x00, 0x25, 0x01, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x27, 0x01, 0x01, 0x03, 0x02, 0x04, 0xaa, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x06, 0x01, 0x80, 0x00, 0x00, 0x04, 0x04, 0xe4, 0x00, 0x48, 0x00, 0x02, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x06, 0x01, 0x7c, 0x00, 0x00, 0x64, 0x2a, 0x0b, 0x6b, 0x83, 0x2c, 0x80, 0xff, 0xff, 0x00, 0x00, 0x00, 0xf1, 0x00, 0xd1, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x64, 0x2a, 0x0b, 0x6b, 0x83, 0x2c, 0x80, 0xff, 0xff, 0x00, 0x00, 0x00, 0xf1, 0x00, 0xd2, 0x00, 0x00, 0x04, 0xb0, 0x40, 0x05, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x06, 0x01, 0x80, 0x00, 0x00, 0x03, 0x9e, 0x36, 0x00, 0x2c, 0x04, 0x00, 0x27, 0x10, 0x7c, 0x00, 0x00, 0x00, 0x2a, 0x0b, 0x6b, 0x83, 0x2c, 0x80, 0xff, 0xff, 0x00, 0x00, 0x00, 0xb1, 0x00, 0xf1, 0x00, 0x00};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,2067413912700624769u));
	packet.setDest(std::make_uint128(18338657682652659712u,8940765662646544802u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest18) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0xbd, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,15864434363230491653u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest19) {
	parser::bytevector data = {0x03, 0x02, 0x00, 0x1c, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x3c, 0xff, 0x00, 0x00, 0x00, 0x00, 0x01, 0x13, 0x05, 0xdc, 0x00, 0x07, 0xc3, 0x04, 0x61, 0xb8};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,2908403968511342810u));
	packet.setDest(std::make_uint128(18338657682652659712u,15864434363230491653u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest20) {
	parser::bytevector data = {0x03, 0x02, 0x01, 0x70, 0x01, 0x01, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x0c, 0xda, 0x00, 0x00, 0x00, 0x00, 0x01, 0x13, 0x05, 0xdc, 0x00, 0x00, 0xc3, 0x04, 0x61, 0xb8, 0x04, 0x81, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x80, 0x00, 0x00, 0x06, 0x35, 0x5a, 0x00, 0x28, 0x04, 0xa9, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x80, 0x00, 0x00, 0x04, 0x0f, 0x98, 0x00, 0x48, 0x04, 0xae, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x01, 0x01, 0x01, 0x02, 0x80, 0x00, 0x00, 0x03, 0xb0, 0xa1, 0x00, 0x40, 0x04, 0x82, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01, 0x80, 0x00, 0x00, 0x06, 0x4d, 0x6b, 0x00, 0x58, 0x04, 0xa9, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01, 0x80, 0x00, 0x00, 0x04, 0xe1, 0x4e, 0x00, 0x84, 0x04, 0x83, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x01, 0x80, 0x00, 0x00, 0x06, 0xff, 0x05, 0x00, 0x48, 0x04, 0xaa, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x01, 0x80, 0x00, 0x00, 0x04, 0xa2, 0xb6, 0x00, 0x70, 0x04, 0x83, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x80, 0x00, 0x00, 0x06, 0xba, 0xdd, 0x00, 0x28, 0x04, 0xaa, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x80, 0x00, 0x00, 0x04, 0x0c, 0x9f, 0x00, 0x48, 0x04, 0xaa, 0x40, 0x05, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x80, 0x00, 0x00, 0x03, 0xf6, 0x84, 0x00, 0x24, 0x04, 0x84, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x02, 0x80, 0x00, 0x00, 0x06, 0xd8, 0x24, 0x00, 0x48, 0x04, 0xab, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x02, 0x80, 0x00, 0x00, 0x04, 0x42, 0x12, 0x00, 0x70, 0x04, 0xa0, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x06, 0x01, 0x80, 0x00, 0x00, 0x05, 0x86, 0x09, 0x00, 0x38, 0x04, 0xab, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x06, 0x01, 0x80, 0x00, 0x00, 0x04, 0x04, 0xe4, 0x00, 0x48, 0x04, 0xb1, 0x40, 0x05, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x06, 0x01, 0x80, 0x00, 0x00, 0x03, 0x9e, 0x36, 0x00, 0x2c, 0x00, 0x03, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x01, 0x0e, 0x1b, 0x00, 0x18, 0x00, 0x03, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x01, 0x11, 0x0d, 0x00, 0x84};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,15864434363230491653u));
	packet.setDest(std::make_uint128(18338657682652659712u,2908403968511342810u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest21) {
	parser::bytevector data = {0x03, 0x02, 0x01, 0x70, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x7b, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x01, 0x13, 0x05, 0xdc, 0x00, 0x01, 0xc3, 0x04, 0x61, 0xb9, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x01, 0x0e, 0x1b, 0x00, 0x18, 0x00, 0x00, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x01, 0x11, 0x0d, 0x00, 0x84, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0f, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x01, 0x44, 0x4f, 0x00, 0x40, 0x04, 0x83, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x01, 0x80, 0x00, 0x00, 0x06, 0xff, 0x05, 0x00, 0x48, 0x04, 0xa9, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x01, 0x80, 0x00, 0x00, 0x04, 0xa2, 0xb6, 0x00, 0x70, 0x04, 0x83, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01, 0x80, 0x00, 0x00, 0x06, 0x4d, 0x6b, 0x00, 0x58, 0x04, 0xaa, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01, 0x80, 0x00, 0x00, 0x04, 0xe1, 0x4e, 0x00, 0x84, 0x04, 0x83, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x80, 0x00, 0x00, 0x06, 0x35, 0x5a, 0x00, 0x28, 0x04, 0xab, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x80, 0x00, 0x00, 0x04, 0x0f, 0x98, 0x00, 0x48, 0x04, 0x84, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x80, 0x00, 0x00, 0x06, 0xba, 0xdd, 0x00, 0x28, 0x04, 0xab, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x80, 0x00, 0x00, 0x04, 0x0c, 0x9f, 0x00, 0x48, 0x04, 0xab, 0x40, 0x05, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x80, 0x00, 0x00, 0x03, 0xf6, 0x84, 0x00, 0x24, 0x04, 0x84, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x02, 0x80, 0x00, 0x00, 0x06, 0xd8, 0x24, 0x00, 0x48, 0x04, 0xab, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x02, 0x80, 0x00, 0x00, 0x04, 0x42, 0x12, 0x00, 0x70, 0x04, 0x9f, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x06, 0x01, 0x80, 0x00, 0x00, 0x05, 0x86, 0x09, 0x00, 0x38, 0x04, 0xaa, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x06, 0x01, 0x80, 0x00, 0x00, 0x04, 0x04, 0xe4, 0x00, 0x48, 0x04, 0xb0, 0x40, 0x05, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x06, 0x01, 0x80, 0x00, 0x00, 0x03, 0x9e, 0x36, 0x00, 0x2c};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,2908403968511342810u));
	packet.setDest(std::make_uint128(18338657682652659712u,15864434363230491653u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest22) {
	parser::bytevector data = {0x03, 0x03, 0x00, 0x1c, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x66, 0x96, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x01, 0x01, 0x01, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,2908403968511342810u));
	packet.setDest(std::make_uint128(18338657682652659712u,15864434363230491653u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest23) {
	parser::bytevector data = {0x03, 0x02, 0x00, 0x1c, 0x01, 0x01, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x05, 0x00, 0x00, 0x00, 0x00, 0x01, 0x13, 0x05, 0xdc, 0x00, 0x00, 0xc3, 0x04, 0x61, 0xb9};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,15864434363230491653u));
	packet.setDest(std::make_uint128(18338657682652659712u,2908403968511342810u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest24) {
	parser::bytevector data = {0x03, 0x03, 0x00, 0x1c, 0x01, 0x01, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x66, 0x97, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0f, 0x01, 0x01, 0x02, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,15864434363230491653u));
	packet.setDest(std::make_uint128(18338657682652659712u,2908403968511342810u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest25) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0x54, 0x01, 0x01, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0xb7, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0xaf, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x01, 0x01, 0x01, 0x02, 0x80, 0x00, 0x00, 0x03, 0xb0, 0xa1, 0x00, 0x40, 0x01, 0x00, 0x01, 0x13, 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x29, 0xca, 0xff, 0xfe, 0xda, 0x94, 0x05, 0x00, 0x00, 0x00, 0x01, 0x7c, 0x00, 0x00, 0x00, 0x2a, 0x0b, 0x6b, 0x83, 0x2c, 0x80, 0xff, 0xff, 0x00, 0x00, 0x00, 0xe2, 0x00, 0xc2, 0x00, 0x00};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,15864434363230491653u));
	packet.setDest(std::make_uint128(18338657682652659712u,2908403968511342810u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest26) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0x54, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x06, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0f, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x01, 0x44, 0x4f, 0x00, 0x40, 0x01, 0x00, 0x01, 0x13, 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x5c, 0xb9, 0xff, 0xfe, 0x74, 0x78, 0xda, 0x00, 0x00, 0x00, 0x01, 0x7c, 0x00, 0x00, 0x00, 0x2a, 0x0b, 0x6b, 0x83, 0x2c, 0x80, 0xff, 0xff, 0x00, 0x00, 0x00, 0xe2, 0x00, 0xc2, 0x00, 0x00};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,2908403968511342810u));
	packet.setDest(std::make_uint128(18338657682652659712u,15864434363230491653u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest27) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x3d, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,9252625643192011738u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest28) {
	parser::bytevector data = {0x03, 0x02, 0x00, 0x1c, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x73, 0x47, 0x00, 0x00, 0x00, 0x00, 0x01, 0x13, 0x05, 0xdc, 0x00, 0x07, 0x96, 0xa5, 0x62, 0xdb};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,5510013406568449447u));
	packet.setDest(std::make_uint128(18338657682652659712u,9252625643192011738u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest29) {
	parser::bytevector data = {0x03, 0x02, 0x00, 0x1c, 0x01, 0x01, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x95, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x01, 0x13, 0x05, 0xdc, 0x00, 0x07, 0xd8, 0xab, 0xfe, 0x10};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,9252625643192011738u));
	packet.setDest(std::make_uint128(18338657682652659712u,5510013406568449447u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest30) {
	parser::bytevector data = {0x03, 0x02, 0x01, 0x70, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0xbd, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x13, 0x05, 0xdc, 0x00, 0x00, 0xd8, 0xab, 0xfe, 0x10, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x01, 0x0e, 0x1b, 0x00, 0x18, 0x00, 0x00, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x01, 0x11, 0x0d, 0x00, 0x84, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1a, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x01, 0x5c, 0x2b, 0x00, 0x40, 0x04, 0x83, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x01, 0x80, 0x00, 0x00, 0x06, 0xff, 0x05, 0x00, 0x48, 0x04, 0xa9, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x01, 0x80, 0x00, 0x00, 0x04, 0xa2, 0xb6, 0x00, 0x70, 0x04, 0x83, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01, 0x80, 0x00, 0x00, 0x06, 0x4d, 0x6b, 0x00, 0x58, 0x04, 0xaa, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01, 0x80, 0x00, 0x00, 0x04, 0xe1, 0x4e, 0x00, 0x84, 0x04, 0x83, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x80, 0x00, 0x00, 0x06, 0x35, 0x5a, 0x00, 0x28, 0x04, 0xab, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x80, 0x00, 0x00, 0x04, 0x0f, 0x98, 0x00, 0x48, 0x04, 0x84, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x80, 0x00, 0x00, 0x06, 0xba, 0xdd, 0x00, 0x28, 0x04, 0xab, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x80, 0x00, 0x00, 0x04, 0x0c, 0x9f, 0x00, 0x48, 0x04, 0xab, 0x40, 0x05, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x80, 0x00, 0x00, 0x03, 0xf6, 0x84, 0x00, 0x24, 0x04, 0x84, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x02, 0x80, 0x00, 0x00, 0x06, 0xd8, 0x24, 0x00, 0x48, 0x04, 0xab, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x02, 0x80, 0x00, 0x00, 0x04, 0x42, 0x12, 0x00, 0x70, 0x04, 0x9f, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x06, 0x01, 0x80, 0x00, 0x00, 0x05, 0x86, 0x09, 0x00, 0x38, 0x04, 0xaa, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x06, 0x01, 0x80, 0x00, 0x00, 0x04, 0x04, 0xe4, 0x00, 0x48, 0x04, 0xb0, 0x40, 0x05, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x06, 0x01, 0x80, 0x00, 0x00, 0x03, 0x9e, 0x36, 0x00, 0x2c};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,5510013406568449447u));
	packet.setDest(std::make_uint128(18338657682652659712u,9252625643192011738u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest31) {
	parser::bytevector data = {0x03, 0x02, 0x01, 0x70, 0x01, 0x01, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0xa2, 0x78, 0x00, 0x00, 0x00, 0x00, 0x01, 0x13, 0x05, 0xdc, 0x00, 0x01, 0xd8, 0xab, 0xfe, 0x11, 0x04, 0x82, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x02, 0x80, 0x00, 0x00, 0x06, 0xd8, 0x24, 0x00, 0x48, 0x04, 0xaa, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x02, 0x80, 0x00, 0x00, 0x04, 0x42, 0x12, 0x00, 0x70, 0x04, 0xae, 0x00, 0x08, 0x00, 0x00, 0x00, 0x19, 0x01, 0x01, 0x03, 0x02, 0x80, 0x00, 0x00, 0x03, 0x70, 0x0f, 0x00, 0x40, 0x04, 0x83, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x80, 0x00, 0x00, 0x06, 0xba, 0xdd, 0x00, 0x28, 0x04, 0xaa, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x80, 0x00, 0x00, 0x04, 0x0c, 0x9f, 0x00, 0x48, 0x04, 0xaa, 0x40, 0x05, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x80, 0x00, 0x00, 0x03, 0xf6, 0x84, 0x00, 0x24, 0x04, 0x82, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x01, 0x80, 0x00, 0x00, 0x06, 0xff, 0x05, 0x00, 0x48, 0x04, 0xa9, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x01, 0x80, 0x00, 0x00, 0x04, 0xa2, 0xb6, 0x00, 0x70, 0x04, 0x82, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01, 0x80, 0x00, 0x00, 0x06, 0x4d, 0x6b, 0x00, 0x58, 0x04, 0xa9, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01, 0x80, 0x00, 0x00, 0x04, 0xe1, 0x4e, 0x00, 0x84, 0x04, 0x82, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x80, 0x00, 0x00, 0x06, 0x35, 0x5a, 0x00, 0x28, 0x04, 0xaa, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x80, 0x00, 0x00, 0x04, 0x0f, 0x98, 0x00, 0x48, 0x04, 0x9e, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x06, 0x01, 0x80, 0x00, 0x00, 0x05, 0x86, 0x09, 0x00, 0x38, 0x04, 0xa9, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x06, 0x01, 0x80, 0x00, 0x00, 0x04, 0x04, 0xe4, 0x00, 0x48, 0x04, 0xaf, 0x40, 0x05, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x06, 0x01, 0x80, 0x00, 0x00, 0x03, 0x9e, 0x36, 0x00, 0x2c, 0x00, 0x02, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x01, 0x0e, 0x1b, 0x00, 0x18, 0x00, 0x02, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x01, 0x11, 0x0d, 0x00, 0x84};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,9252625643192011738u));
	packet.setDest(std::make_uint128(18338657682652659712u,5510013406568449447u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest32) {
	parser::bytevector data = {0x03, 0x03, 0x00, 0x1c, 0x01, 0x01, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x6f, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1a, 0x01, 0x01, 0x02, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,9252625643192011738u));
	packet.setDest(std::make_uint128(18338657682652659712u,5510013406568449447u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest33) {
	parser::bytevector data = {0x03, 0x02, 0x00, 0x1c, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x96, 0x11, 0x00, 0x00, 0x00, 0x00, 0x01, 0x13, 0x05, 0xdc, 0x00, 0x00, 0xd8, 0xab, 0xfe, 0x11};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,5510013406568449447u));
	packet.setDest(std::make_uint128(18338657682652659712u,9252625643192011738u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest34) {
	parser::bytevector data = {0x03, 0x03, 0x00, 0x1c, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x6f, 0x99, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x19, 0x01, 0x01, 0x03, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,5510013406568449447u));
	packet.setDest(std::make_uint128(18338657682652659712u,9252625643192011738u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest35) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0x54, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x83, 0x3a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1a, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x01, 0x5c, 0x2b, 0x00, 0x40, 0x01, 0x00, 0x01, 0x13, 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x77, 0x7f, 0xff, 0xfe, 0x27, 0x05, 0xa7, 0x00, 0x00, 0x00, 0x01, 0x7c, 0x00, 0x00, 0x00, 0x2a, 0x0b, 0x6b, 0x83, 0x2c, 0x80, 0xff, 0xff, 0x00, 0x00, 0x00, 0xc2, 0x00, 0xd2, 0x00, 0x00};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,5510013406568449447u));
	packet.setDest(std::make_uint128(18338657682652659712u,9252625643192011738u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest36) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0x54, 0x01, 0x01, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x80, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0xaf, 0x00, 0x08, 0x00, 0x00, 0x00, 0x19, 0x01, 0x01, 0x03, 0x02, 0x80, 0x00, 0x00, 0x03, 0x70, 0x0f, 0x00, 0x40, 0x01, 0x00, 0x01, 0x13, 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x67, 0xed, 0xff, 0xfe, 0x21, 0x4b, 0xda, 0x00, 0x00, 0x00, 0x01, 0x7c, 0x00, 0x00, 0x00, 0x2a, 0x0b, 0x6b, 0x83, 0x2c, 0x80, 0xff, 0xff, 0x00, 0x00, 0x00, 0xc2, 0x00, 0xd2, 0x00, 0x00};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,9252625643192011738u));
	packet.setDest(std::make_uint128(18338657682652659712u,5510013406568449447u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest37) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0x6c, 0x01, 0x01, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x67, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x02, 0x80, 0x00, 0x00, 0x07, 0x4c, 0x01, 0x00, 0x58, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x16, 0x01, 0x01, 0x02, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x1c, 0x01, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x1a, 0x01, 0x01, 0x02, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x28, 0x01, 0x01, 0x06, 0x01};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,9252625643192011738u));
	packet.setDest(std::make_uint128(18338657682652659712u,5510013406568449447u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest38) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0xc4, 0x01, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0xf6, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x01, 0x80, 0x00, 0x00, 0x07, 0x72, 0xe6, 0x00, 0x58, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x18, 0x01, 0x01, 0x02, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x14, 0x01, 0x01, 0x02, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x1b, 0x01, 0x01, 0x03, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x26, 0x01, 0x01, 0x06, 0x01, 0x00, 0x02, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x02, 0x80, 0x00, 0x00, 0x07, 0x4c, 0x01, 0x00, 0x58, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x16, 0x01, 0x01, 0x02, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x1c, 0x01, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x1a, 0x01, 0x01, 0x02, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x28, 0x01, 0x01, 0x06, 0x01};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,2067413912700624769u));
	packet.setDest(std::make_uint128(18338657682652659712u,8940765662646544802u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest39) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0x6c, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x5d, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x02, 0x80, 0x00, 0x00, 0x07, 0x4c, 0x01, 0x00, 0x58, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x16, 0x01, 0x01, 0x02, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x1c, 0x01, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x1a, 0x01, 0x01, 0x02, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x28, 0x01, 0x01, 0x06, 0x01};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,2908403968511342810u));
	packet.setDest(std::make_uint128(18338657682652659712u,15864434363230491653u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest40) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0xa4, 0x01, 0x01, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x8e, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x80, 0x00, 0x00, 0x07, 0x1d, 0x4f, 0x00, 0x38, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0d, 0x01, 0x01, 0x02, 0x01, 0x01, 0x00, 0x03, 0xe8, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0f, 0x01, 0x01, 0x02, 0x02, 0x00, 0x03, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x02, 0x80, 0x00, 0x00, 0x07, 0x4c, 0x01, 0x00, 0x58, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x16, 0x01, 0x01, 0x02, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x1c, 0x01, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x1a, 0x01, 0x01, 0x02, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x28, 0x01, 0x01, 0x06, 0x01};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,15864434363230491653u));
	packet.setDest(std::make_uint128(18338657682652659712u,2908403968511342810u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest41) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0x6c, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x29, 0x9e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x02, 0x80, 0x00, 0x00, 0x07, 0x4c, 0x01, 0x00, 0x58, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x16, 0x01, 0x01, 0x02, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x1c, 0x01, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x1a, 0x01, 0x01, 0x02, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x28, 0x01, 0x01, 0x06, 0x01};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,8940765662646544802u));
	packet.setDest(std::make_uint128(18338657682652659712u,2067413912700624769u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest42) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0x6c, 0x01, 0x01, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x37, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x01, 0x80, 0x00, 0x00, 0x07, 0x72, 0xe6, 0x00, 0x58, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x18, 0x01, 0x01, 0x02, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x14, 0x01, 0x01, 0x02, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x1b, 0x01, 0x01, 0x03, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x26, 0x01, 0x01, 0x06, 0x01};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,15864434363230491653u));
	packet.setDest(std::make_uint128(18338657682652659712u,2908403968511342810u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest43) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0x6c, 0x01, 0x01, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x40, 0x4b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x01, 0x80, 0x00, 0x00, 0x07, 0x72, 0xe6, 0x00, 0x58, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x18, 0x01, 0x01, 0x02, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x14, 0x01, 0x01, 0x02, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x1b, 0x01, 0x01, 0x03, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x26, 0x01, 0x01, 0x06, 0x01};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,9252625643192011738u));
	packet.setDest(std::make_uint128(18338657682652659712u,5510013406568449447u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest44) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0x6c, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x01, 0x80, 0x00, 0x00, 0x07, 0x72, 0xe6, 0x00, 0x58, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x18, 0x01, 0x01, 0x02, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x14, 0x01, 0x01, 0x02, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x1b, 0x01, 0x01, 0x03, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x26, 0x01, 0x01, 0x06, 0x01};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,2908403968511342810u));
	packet.setDest(std::make_uint128(18338657682652659712u,15864434363230491653u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest45) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0x6c, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x41, 0x4b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x01, 0x80, 0x00, 0x00, 0x07, 0x72, 0xe6, 0x00, 0x58, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x18, 0x01, 0x01, 0x02, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x14, 0x01, 0x01, 0x02, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x1b, 0x01, 0x01, 0x03, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x26, 0x01, 0x01, 0x06, 0x01};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,5510013406568449447u));
	packet.setDest(std::make_uint128(18338657682652659712u,9252625643192011738u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest46) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0x4c, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x65, 0xa2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x80, 0x00, 0x00, 0x07, 0x1d, 0x4f, 0x00, 0x38, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0d, 0x01, 0x01, 0x02, 0x01, 0x01, 0x00, 0x03, 0xe8, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0f, 0x01, 0x01, 0x02, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,8940765662646544802u));
	packet.setDest(std::make_uint128(18338657682652659712u,2067413912700624769u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest47) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0x4c, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0xa4, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x80, 0x00, 0x00, 0x07, 0x1d, 0x4f, 0x00, 0x38, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0d, 0x01, 0x01, 0x02, 0x01, 0x01, 0x00, 0x03, 0xe8, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0f, 0x01, 0x01, 0x02, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,5510013406568449447u));
	packet.setDest(std::make_uint128(18338657682652659712u,9252625643192011738u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest48) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0x4c, 0x01, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x64, 0xa2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x80, 0x00, 0x00, 0x07, 0x1d, 0x4f, 0x00, 0x38, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0d, 0x01, 0x01, 0x02, 0x01, 0x01, 0x00, 0x03, 0xe8, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0f, 0x01, 0x01, 0x02, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,2067413912700624769u));
	packet.setDest(std::make_uint128(18338657682652659712u,8940765662646544802u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest49) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0x4c, 0x01, 0x01, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0xa3, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x80, 0x00, 0x00, 0x07, 0x1d, 0x4f, 0x00, 0x38, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0d, 0x01, 0x01, 0x02, 0x01, 0x01, 0x00, 0x03, 0xe8, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0f, 0x01, 0x01, 0x02, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,9252625643192011738u));
	packet.setDest(std::make_uint128(18338657682652659712u,5510013406568449447u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest50) {
	parser::bytevector data = {0x03, 0x05, 0x01, 0x50, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0xe5, 0x01, 0x00, 0x00, 0x04, 0x83, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x01, 0x80, 0x00, 0x00, 0x06, 0xff, 0x05, 0x00, 0x48, 0x04, 0xa9, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x01, 0x80, 0x00, 0x00, 0x04, 0xa2, 0xb6, 0x00, 0x70, 0x04, 0xaf, 0x00, 0x08, 0x00, 0x00, 0x00, 0x17, 0x01, 0x01, 0x03, 0x01, 0x80, 0x00, 0x00, 0x03, 0x1c, 0x70, 0x00, 0x40, 0x04, 0x83, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01, 0x80, 0x00, 0x00, 0x06, 0x4d, 0x6b, 0x00, 0x58, 0x04, 0xaa, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01, 0x80, 0x00, 0x00, 0x04, 0xe1, 0x4e, 0x00, 0x84, 0x04, 0x83, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x80, 0x00, 0x00, 0x06, 0x35, 0x5a, 0x00, 0x28, 0x04, 0xab, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x80, 0x00, 0x00, 0x04, 0x0f, 0x98, 0x00, 0x48, 0x04, 0x84, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x80, 0x00, 0x00, 0x06, 0xba, 0xdd, 0x00, 0x28, 0x04, 0xab, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x80, 0x00, 0x00, 0x04, 0x0c, 0x9f, 0x00, 0x48, 0x04, 0xab, 0x40, 0x05, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x80, 0x00, 0x00, 0x03, 0xf6, 0x84, 0x00, 0x24, 0x04, 0x84, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x02, 0x80, 0x00, 0x00, 0x06, 0xd8, 0x24, 0x00, 0x48, 0x04, 0xab, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x02, 0x80, 0x00, 0x00, 0x04, 0x42, 0x12, 0x00, 0x70, 0x04, 0x9f, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x06, 0x01, 0x80, 0x00, 0x00, 0x05, 0x86, 0x09, 0x00, 0x38, 0x04, 0xaa, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x06, 0x01, 0x80, 0x00, 0x00, 0x04, 0x04, 0xe4, 0x00, 0x48, 0x04, 0xb0, 0x40, 0x05, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x06, 0x01, 0x80, 0x00, 0x00, 0x03, 0x9e, 0x36, 0x00, 0x2c, 0x00, 0x01, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x01, 0x80, 0x00, 0x00, 0x07, 0x72, 0xe6, 0x00, 0x58};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,8940765662646544802u));
	packet.setDest(std::make_uint128(18338657682652659712u,2067413912700624769u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest51) {
	parser::bytevector data = {0x03, 0x05, 0x00, 0x4c, 0x01, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x28, 0xfc, 0x00, 0x00, 0x00, 0x01, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x01, 0x0e, 0x1b, 0x00, 0x18, 0x00, 0x01, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x01, 0x11, 0x0d, 0x00, 0x84, 0x00, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x18, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x01, 0x21, 0x9b, 0x00, 0x40};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,2067413912700624769u));
	packet.setDest(std::make_uint128(18338657682652659712u,8940765662646544802u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest52) {
	parser::bytevector data = {0x03, 0x05, 0x00, 0x38, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x71, 0x34, 0x00, 0x00, 0x04, 0xaf, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x01, 0x01, 0x01, 0x02, 0x80, 0x00, 0x00, 0x03, 0xb0, 0xa1, 0x00, 0x40, 0x00, 0x01, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x80, 0x00, 0x00, 0x07, 0x1d, 0x4f, 0x00, 0x38};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,2908403968511342810u));
	packet.setDest(std::make_uint128(18338657682652659712u,15864434363230491653u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest53) {
	parser::bytevector data = {0x03, 0x05, 0x00, 0x24, 0x01, 0x01, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0xa1, 0xf3, 0x00, 0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0f, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x01, 0x44, 0x4f, 0x00, 0x40};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,15864434363230491653u));
	packet.setDest(std::make_uint128(18338657682652659712u,2908403968511342810u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest54) {
	parser::bytevector data = {0x03, 0x05, 0x00, 0x38, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x89, 0xf7, 0x00, 0x00, 0x04, 0xaf, 0x00, 0x08, 0x00, 0x00, 0x00, 0x19, 0x01, 0x01, 0x03, 0x02, 0x80, 0x00, 0x00, 0x03, 0x70, 0x0f, 0x00, 0x40, 0x00, 0x01, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x02, 0x80, 0x00, 0x00, 0x07, 0x4c, 0x01, 0x00, 0x58};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,5510013406568449447u));
	packet.setDest(std::make_uint128(18338657682652659712u,9252625643192011738u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest55) {
	parser::bytevector data = {0x03, 0x05, 0x00, 0x24, 0x01, 0x01, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x93, 0x18, 0x00, 0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1a, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x01, 0x5c, 0x2b, 0x00, 0x40};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,9252625643192011738u));
	packet.setDest(std::make_uint128(18338657682652659712u,5510013406568449447u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest56) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0x5c, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0xf6, 0x9f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x02, 0xb8, 0xf3, 0x00, 0x48, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x03, 0xe8, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x10, 0x01, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x17, 0x01, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x19, 0x01, 0x01, 0x03, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,2908403968511342810u));
	packet.setDest(std::make_uint128(18338657682652659712u,15864434363230491653u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest57) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0x5c, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x02, 0xb8, 0xf3, 0x00, 0x48, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x03, 0xe8, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x10, 0x01, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x17, 0x01, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x19, 0x01, 0x01, 0x03, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,8940765662646544802u));
	packet.setDest(std::make_uint128(18338657682652659712u,2067413912700624769u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest58) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0x5c, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0xac, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x02, 0xb8, 0xf3, 0x00, 0x48, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x03, 0xe8, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x10, 0x01, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x17, 0x01, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x19, 0x01, 0x01, 0x03, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,5510013406568449447u));
	packet.setDest(std::make_uint128(18338657682652659712u,9252625643192011738u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest59) {
	parser::bytevector data = {0x03, 0x05, 0x00, 0x24, 0x01, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0xd7, 0xe2, 0x00, 0x00, 0x00, 0x01, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x02, 0xb8, 0xf3, 0x00, 0x48};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,2067413912700624769u));
	packet.setDest(std::make_uint128(18338657682652659712u,8940765662646544802u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest60) {
	parser::bytevector data = {0x03, 0x05, 0x00, 0x24, 0x01, 0x01, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x5c, 0x00, 0x00, 0x00, 0x01, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x02, 0xb8, 0xf3, 0x00, 0x48};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,15864434363230491653u));
	packet.setDest(std::make_uint128(18338657682652659712u,2908403968511342810u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest61) {
	parser::bytevector data = {0x03, 0x05, 0x00, 0x24, 0x01, 0x01, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x16, 0x68, 0x00, 0x00, 0x00, 0x01, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x02, 0xb8, 0xf3, 0x00, 0x48};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,9252625643192011738u));
	packet.setDest(std::make_uint128(18338657682652659712u,5510013406568449447u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest62) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x68, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,10431855162518248275u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest63) {
	parser::bytevector data = {0x03, 0x02, 0x00, 0x1c, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x17, 0x38, 0x00, 0x00, 0x00, 0x00, 0x01, 0x13, 0x05, 0xdc, 0x00, 0x07, 0x16, 0x19, 0x44, 0x92};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,4635624585554864598u));
	packet.setDest(std::make_uint128(18338657682652659712u,10431855162518248275u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest64) {
	parser::bytevector data = {0x03, 0x02, 0x01, 0x70, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x44, 0xf7, 0x00, 0x00, 0x00, 0x00, 0x01, 0x13, 0x05, 0xdc, 0x00, 0x00, 0x16, 0x19, 0x44, 0x92, 0x04, 0x8b, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x80, 0x00, 0x00, 0x06, 0xba, 0xdd, 0x00, 0x28, 0x04, 0xb1, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x80, 0x00, 0x00, 0x04, 0x0c, 0x9f, 0x00, 0x48, 0x04, 0xb1, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0c, 0x01, 0x01, 0x01, 0x01, 0x80, 0x00, 0x00, 0x04, 0xe4, 0xd4, 0x00, 0x40, 0x04, 0xb1, 0x40, 0x05, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x80, 0x00, 0x00, 0x03, 0xf6, 0x84, 0x00, 0x24, 0x00, 0x09, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x01, 0x80, 0x00, 0x00, 0x07, 0x72, 0xe6, 0x00, 0x58, 0x04, 0xb3, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x01, 0x80, 0x00, 0x00, 0x04, 0xa2, 0xb6, 0x00, 0x70, 0x04, 0x8a, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01, 0x80, 0x00, 0x00, 0x06, 0x4d, 0x6b, 0x00, 0x58, 0x04, 0xb2, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01, 0x80, 0x00, 0x00, 0x04, 0xe1, 0x4e, 0x00, 0x84, 0x00, 0x09, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x80, 0x00, 0x00, 0x07, 0x1d, 0x4f, 0x00, 0x38, 0x04, 0xb3, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x80, 0x00, 0x00, 0x04, 0x0f, 0x98, 0x00, 0x48, 0x00, 0x09, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x02, 0x80, 0x00, 0x00, 0x07, 0x4c, 0x01, 0x00, 0x58, 0x04, 0xb4, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x02, 0x80, 0x00, 0x00, 0x04, 0x42, 0x12, 0x00, 0x70, 0x04, 0xa9, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x06, 0x01, 0x80, 0x00, 0x00, 0x05, 0x86, 0x09, 0x00, 0x38, 0x04, 0xb4, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x06, 0x01, 0x80, 0x00, 0x00, 0x04, 0x04, 0xe4, 0x00, 0x48, 0x04, 0xba, 0x40, 0x05, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x06, 0x01, 0x80, 0x00, 0x00, 0x03, 0x9e, 0x36, 0x00, 0x2c, 0x00, 0x06, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x02, 0xb8, 0xf3, 0x00, 0x48, 0x00, 0x0b, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x01, 0x11, 0x0d, 0x00, 0x84};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,10431855162518248275u));
	packet.setDest(std::make_uint128(18338657682652659712u,4635624585554864598u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest65) {
	parser::bytevector data = {0x03, 0x02, 0x01, 0x70, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0xb1, 0x8c, 0x00, 0x00, 0x00, 0x00, 0x01, 0x13, 0x05, 0xdc, 0x00, 0x01, 0x16, 0x19, 0x44, 0x93, 0x00, 0x03, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x02, 0xb8, 0xf3, 0x00, 0x48, 0x00, 0x09, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x01, 0x11, 0x0d, 0x00, 0x84, 0x00, 0x09, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0b, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x01, 0x7a, 0xf2, 0x00, 0x40, 0x00, 0x08, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x01, 0x80, 0x00, 0x00, 0x07, 0x72, 0xe6, 0x00, 0x58, 0x04, 0xb1, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x01, 0x80, 0x00, 0x00, 0x04, 0xa2, 0xb6, 0x00, 0x70, 0x04, 0x8b, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01, 0x80, 0x00, 0x00, 0x06, 0x4d, 0x6b, 0x00, 0x58, 0x04, 0xb2, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01, 0x80, 0x00, 0x00, 0x04, 0xe1, 0x4e, 0x00, 0x84, 0x00, 0x08, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x80, 0x00, 0x00, 0x07, 0x1d, 0x4f, 0x00, 0x38, 0x04, 0xb3, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x80, 0x00, 0x00, 0x04, 0x0f, 0x98, 0x00, 0x48, 0x04, 0x8c, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x80, 0x00, 0x00, 0x06, 0xba, 0xdd, 0x00, 0x28, 0x04, 0xb3, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x80, 0x00, 0x00, 0x04, 0x0c, 0x9f, 0x00, 0x48, 0x04, 0xb3, 0x40, 0x05, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x80, 0x00, 0x00, 0x03, 0xf6, 0x84, 0x00, 0x24, 0x00, 0x08, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x02, 0x80, 0x00, 0x00, 0x07, 0x4c, 0x01, 0x00, 0x58, 0x04, 0xb3, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x02, 0x80, 0x00, 0x00, 0x04, 0x42, 0x12, 0x00, 0x70, 0x04, 0xa7, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x06, 0x01, 0x80, 0x00, 0x00, 0x05, 0x86, 0x09, 0x00, 0x38, 0x04, 0xb2, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x06, 0x01, 0x80, 0x00, 0x00, 0x04, 0x04, 0xe4, 0x00, 0x48, 0x04, 0xb8, 0x40, 0x05, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x06, 0x01, 0x80, 0x00, 0x00, 0x03, 0x9e, 0x36, 0x00, 0x2c};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,4635624585554864598u));
	packet.setDest(std::make_uint128(18338657682652659712u,10431855162518248275u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest66) {
	parser::bytevector data = {0x03, 0x03, 0x00, 0x1c, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x76, 0xc2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0c, 0x01, 0x01, 0x01, 0x01};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,4635624585554864598u));
	packet.setDest(std::make_uint128(18338657682652659712u,10431855162518248275u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest67) {
	parser::bytevector data = {0x03, 0x02, 0x00, 0x1c, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x01, 0x13, 0x05, 0xdc, 0x00, 0x00, 0x16, 0x19, 0x44, 0x93};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,10431855162518248275u));
	packet.setDest(std::make_uint128(18338657682652659712u,4635624585554864598u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest68) {
	parser::bytevector data = {0x03, 0x03, 0x00, 0x1c, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x76, 0xc3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0b, 0x01, 0x01, 0x02, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,10431855162518248275u));
	packet.setDest(std::make_uint128(18338657682652659712u,4635624585554864598u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest69) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0x54, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x3d, 0xec, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0xb2, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0c, 0x01, 0x01, 0x01, 0x01, 0x80, 0x00, 0x00, 0x04, 0xe4, 0xd4, 0x00, 0x40, 0x01, 0x00, 0x01, 0x13, 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0xc5, 0x64, 0xff, 0xfe, 0x39, 0x9b, 0x53, 0x00, 0x00, 0x00, 0x01, 0x7c, 0x00, 0x00, 0x00, 0x2a, 0x0b, 0x6b, 0x83, 0x2c, 0x80, 0xff, 0xff, 0x00, 0x00, 0x00, 0xe1, 0x00, 0xc2, 0x00, 0x00};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,10431855162518248275u));
	packet.setDest(std::make_uint128(18338657682652659712u,4635624585554864598u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest70) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0x54, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x45, 0x8f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0a, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0b, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x01, 0x7a, 0xf2, 0x00, 0x40, 0x01, 0x00, 0x01, 0x13, 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x55, 0x0b, 0xff, 0xfe, 0x10, 0xa9, 0xd6, 0x00, 0x00, 0x00, 0x01, 0x7c, 0x00, 0x00, 0x00, 0x2a, 0x0b, 0x6b, 0x83, 0x2c, 0x80, 0xff, 0xff, 0x00, 0x00, 0x00, 0xe1, 0x00, 0xc2, 0x00, 0x00};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,4635624585554864598u));
	packet.setDest(std::make_uint128(18338657682652659712u,10431855162518248275u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest71) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xf3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,4081570780723689266u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest72) {
	parser::bytevector data = {0x03, 0x02, 0x00, 0x1c, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x22, 0x52, 0x00, 0x00, 0x00, 0x00, 0x01, 0x13, 0x05, 0xdc, 0x00, 0x07, 0x06, 0x78, 0xfc, 0x74};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,14746967710560628462u));
	packet.setDest(std::make_uint128(18338657682652659712u,4081570780723689266u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest73) {
	parser::bytevector data = {0x03, 0x02, 0x01, 0x70, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x36, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x01, 0x13, 0x05, 0xdc, 0x00, 0x00, 0x06, 0x78, 0xfc, 0x74, 0x04, 0x8a, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01, 0x80, 0x00, 0x00, 0x06, 0x4d, 0x6b, 0x00, 0x58, 0x04, 0xb2, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01, 0x80, 0x00, 0x00, 0x04, 0xe1, 0x4e, 0x00, 0x84, 0x04, 0xb7, 0x00, 0x08, 0x00, 0x00, 0x00, 0x12, 0x01, 0x01, 0x02, 0x01, 0x80, 0x00, 0x00, 0x03, 0xfc, 0x26, 0x00, 0x40, 0x00, 0x08, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x80, 0x00, 0x00, 0x07, 0x1d, 0x4f, 0x00, 0x38, 0x04, 0xb2, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x80, 0x00, 0x00, 0x04, 0x0f, 0x98, 0x00, 0x48, 0x00, 0x08, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x01, 0x80, 0x00, 0x00, 0x07, 0x72, 0xe6, 0x00, 0x58, 0x04, 0xb2, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x01, 0x80, 0x00, 0x00, 0x04, 0xa2, 0xb6, 0x00, 0x70, 0x04, 0x8b, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x80, 0x00, 0x00, 0x06, 0xba, 0xdd, 0x00, 0x28, 0x04, 0xb2, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x80, 0x00, 0x00, 0x04, 0x0c, 0x9f, 0x00, 0x48, 0x04, 0xb2, 0x40, 0x05, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x80, 0x00, 0x00, 0x03, 0xf6, 0x84, 0x00, 0x24, 0x00, 0x08, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x02, 0x80, 0x00, 0x00, 0x07, 0x4c, 0x01, 0x00, 0x58, 0x04, 0xb3, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x02, 0x80, 0x00, 0x00, 0x04, 0x42, 0x12, 0x00, 0x70, 0x04, 0xa8, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x06, 0x01, 0x80, 0x00, 0x00, 0x05, 0x86, 0x09, 0x00, 0x38, 0x04, 0xb3, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x06, 0x01, 0x80, 0x00, 0x00, 0x04, 0x04, 0xe4, 0x00, 0x48, 0x04, 0xb9, 0x40, 0x05, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x06, 0x01, 0x80, 0x00, 0x00, 0x03, 0x9e, 0x36, 0x00, 0x2c, 0x00, 0x05, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x02, 0xb8, 0xf3, 0x00, 0x48, 0x00, 0x0a, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x01, 0x11, 0x0d, 0x00, 0x84};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,4081570780723689266u));
	packet.setDest(std::make_uint128(18338657682652659712u,14746967710560628462u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest74) {
	parser::bytevector data = {0x03, 0x02, 0x01, 0x70, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0xad, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x01, 0x13, 0x05, 0xdc, 0x00, 0x01, 0x06, 0x78, 0xfc, 0x75, 0x00, 0x03, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x02, 0xb8, 0xf3, 0x00, 0x48, 0x00, 0x09, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x01, 0x11, 0x0d, 0x00, 0x84, 0x00, 0x09, 0x00, 0x08, 0x00, 0x00, 0x00, 0x11, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x01, 0x89, 0xbd, 0x00, 0x40, 0x00, 0x08, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x01, 0x80, 0x00, 0x00, 0x07, 0x72, 0xe6, 0x00, 0x58, 0x04, 0xb1, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x01, 0x80, 0x00, 0x00, 0x04, 0xa2, 0xb6, 0x00, 0x70, 0x04, 0x8b, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01, 0x80, 0x00, 0x00, 0x06, 0x4d, 0x6b, 0x00, 0x58, 0x04, 0xb2, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01, 0x80, 0x00, 0x00, 0x04, 0xe1, 0x4e, 0x00, 0x84, 0x00, 0x08, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x80, 0x00, 0x00, 0x07, 0x1d, 0x4f, 0x00, 0x38, 0x04, 0xb3, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x80, 0x00, 0x00, 0x04, 0x0f, 0x98, 0x00, 0x48, 0x04, 0x8c, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x80, 0x00, 0x00, 0x06, 0xba, 0xdd, 0x00, 0x28, 0x04, 0xb3, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x80, 0x00, 0x00, 0x04, 0x0c, 0x9f, 0x00, 0x48, 0x04, 0xb3, 0x40, 0x05, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x80, 0x00, 0x00, 0x03, 0xf6, 0x84, 0x00, 0x24, 0x00, 0x08, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x02, 0x80, 0x00, 0x00, 0x07, 0x4c, 0x01, 0x00, 0x58, 0x04, 0xb3, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x02, 0x80, 0x00, 0x00, 0x04, 0x42, 0x12, 0x00, 0x70, 0x04, 0xa7, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x06, 0x01, 0x80, 0x00, 0x00, 0x05, 0x86, 0x09, 0x00, 0x38, 0x04, 0xb2, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x06, 0x01, 0x80, 0x00, 0x00, 0x04, 0x04, 0xe4, 0x00, 0x48, 0x04, 0xb8, 0x40, 0x05, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x06, 0x01, 0x80, 0x00, 0x00, 0x03, 0x9e, 0x36, 0x00, 0x2c};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,14746967710560628462u));
	packet.setDest(std::make_uint128(18338657682652659712u,4081570780723689266u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest75) {
	parser::bytevector data = {0x03, 0x03, 0x00, 0x1c, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x29, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x12, 0x01, 0x01, 0x02, 0x01};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,14746967710560628462u));
	packet.setDest(std::make_uint128(18338657682652659712u,4081570780723689266u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest76) {
	parser::bytevector data = {0x03, 0x02, 0x00, 0x1c, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x22, 0x59, 0x00, 0x00, 0x00, 0x00, 0x01, 0x13, 0x05, 0xdc, 0x00, 0x00, 0x06, 0x78, 0xfc, 0x75};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,4081570780723689266u));
	packet.setDest(std::make_uint128(18338657682652659712u,14746967710560628462u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest77) {
	parser::bytevector data = {0x03, 0x03, 0x00, 0x1c, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x29, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x11, 0x01, 0x01, 0x02, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,4081570780723689266u));
	packet.setDest(std::make_uint128(18338657682652659712u,14746967710560628462u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest78) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0x54, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x51, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0xb8, 0x00, 0x08, 0x00, 0x00, 0x00, 0x12, 0x01, 0x01, 0x02, 0x01, 0x80, 0x00, 0x00, 0x03, 0xfc, 0x26, 0x00, 0x40, 0x01, 0x00, 0x01, 0x13, 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0xa4, 0xa6, 0xff, 0xfe, 0xa6, 0x37, 0x32, 0x00, 0x00, 0x00, 0x01, 0x7c, 0x00, 0x00, 0x00, 0x2a, 0x0b, 0x6b, 0x83, 0x2c, 0x80, 0xff, 0xff, 0x00, 0x00, 0x00, 0xc1, 0x00, 0xc2, 0x00, 0x00};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,4081570780723689266u));
	packet.setDest(std::make_uint128(18338657682652659712u,14746967710560628462u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest79) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0x54, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x23, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0a, 0x00, 0x08, 0x00, 0x00, 0x00, 0x11, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x01, 0x89, 0xbd, 0x00, 0x40, 0x01, 0x00, 0x01, 0x13, 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xa7, 0xc0, 0xff, 0xfe, 0x1f, 0x2e, 0xee, 0x00, 0x00, 0x00, 0x01, 0x7c, 0x00, 0x00, 0x00, 0x2a, 0x0b, 0x6b, 0x83, 0x2c, 0x80, 0xff, 0xff, 0x00, 0x00, 0x00, 0xc1, 0x00, 0xc2, 0x00, 0x00};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,14746967710560628462u));
	packet.setDest(std::make_uint128(18338657682652659712u,4081570780723689266u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest80) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0x7c, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x8f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01, 0x80, 0x00, 0x00, 0x07, 0x5f, 0xb9, 0x00, 0x68, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x0e, 0x01, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x11, 0x01, 0x01, 0x02, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x13, 0x01, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0a, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x15, 0x01, 0x01, 0x03, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,4081570780723689266u));
	packet.setDest(std::make_uint128(18338657682652659712u,14746967710560628462u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest81) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0x7c, 0x01, 0x01, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01, 0x80, 0x00, 0x00, 0x07, 0x5f, 0xb9, 0x00, 0x68, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x0e, 0x01, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x11, 0x01, 0x01, 0x02, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x13, 0x01, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0a, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x15, 0x01, 0x01, 0x03, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,15864434363230491653u));
	packet.setDest(std::make_uint128(18338657682652659712u,2908403968511342810u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest82) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0x7c, 0x01, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x16, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01, 0x80, 0x00, 0x00, 0x07, 0x5f, 0xb9, 0x00, 0x68, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x0e, 0x01, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x11, 0x01, 0x01, 0x02, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x13, 0x01, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0a, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x15, 0x01, 0x01, 0x03, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,2067413912700624769u));
	packet.setDest(std::make_uint128(18338657682652659712u,8940765662646544802u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest83) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0x7c, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x5b, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01, 0x80, 0x00, 0x00, 0x07, 0x5f, 0xb9, 0x00, 0x68, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x0e, 0x01, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x11, 0x01, 0x01, 0x02, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x13, 0x01, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0a, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x15, 0x01, 0x01, 0x03, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,4635624585554864598u));
	packet.setDest(std::make_uint128(18338657682652659712u,10431855162518248275u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest84) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0x7c, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x4b, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01, 0x80, 0x00, 0x00, 0x07, 0x5f, 0xb9, 0x00, 0x68, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x0e, 0x01, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x11, 0x01, 0x01, 0x02, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x13, 0x01, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0a, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x15, 0x01, 0x01, 0x03, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,2908403968511342810u));
	packet.setDest(std::make_uint128(18338657682652659712u,15864434363230491653u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest85) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0x7c, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x17, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01, 0x80, 0x00, 0x00, 0x07, 0x5f, 0xb9, 0x00, 0x68, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x0e, 0x01, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x11, 0x01, 0x01, 0x02, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x13, 0x01, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0a, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x15, 0x01, 0x01, 0x03, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,8940765662646544802u));
	packet.setDest(std::make_uint128(18338657682652659712u,2067413912700624769u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest86) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0xb4, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0xd1, 0x4a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x80, 0x00, 0x00, 0x07, 0xd8, 0xa4, 0x00, 0x38, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x03, 0xe8, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0b, 0x01, 0x01, 0x02, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x09, 0x01, 0x01, 0x02, 0x01, 0x00, 0x02, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01, 0x80, 0x00, 0x00, 0x07, 0x5f, 0xb9, 0x00, 0x68, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x0e, 0x01, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x11, 0x01, 0x01, 0x02, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x13, 0x01, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0a, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x15, 0x01, 0x01, 0x03, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,10431855162518248275u));
	packet.setDest(std::make_uint128(18338657682652659712u,4635624585554864598u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest87) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0x7c, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x56, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01, 0x80, 0x00, 0x00, 0x07, 0x5f, 0xb9, 0x00, 0x68, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x0e, 0x01, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x11, 0x01, 0x01, 0x02, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x13, 0x01, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0a, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x15, 0x01, 0x01, 0x03, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,5510013406568449447u));
	packet.setDest(std::make_uint128(18338657682652659712u,9252625643192011738u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest88) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0x7c, 0x01, 0x01, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x55, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01, 0x80, 0x00, 0x00, 0x07, 0x5f, 0xb9, 0x00, 0x68, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x0e, 0x01, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x11, 0x01, 0x01, 0x02, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x13, 0x01, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0a, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x15, 0x01, 0x01, 0x03, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,9252625643192011738u));
	packet.setDest(std::make_uint128(18338657682652659712u,5510013406568449447u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest89) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0x4c, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0xdd, 0xd7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x80, 0x00, 0x00, 0x07, 0xd8, 0xa4, 0x00, 0x38, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x03, 0xe8, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0b, 0x01, 0x01, 0x02, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x09, 0x01, 0x01, 0x02, 0x01};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,2908403968511342810u));
	packet.setDest(std::make_uint128(18338657682652659712u,15864434363230491653u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest90) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0x4c, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0xa1, 0x5a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x80, 0x00, 0x00, 0x07, 0xd8, 0xa4, 0x00, 0x38, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x03, 0xe8, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0b, 0x01, 0x01, 0x02, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x09, 0x01, 0x01, 0x02, 0x01};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,14746967710560628462u));
	packet.setDest(std::make_uint128(18338657682652659712u,4081570780723689266u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest91) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0x4c, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0xa1, 0x5b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x80, 0x00, 0x00, 0x07, 0xd8, 0xa4, 0x00, 0x38, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x03, 0xe8, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0b, 0x01, 0x01, 0x02, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x09, 0x01, 0x01, 0x02, 0x01};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,4081570780723689266u));
	packet.setDest(std::make_uint128(18338657682652659712u,14746967710560628462u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest92) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0x4c, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0xaa, 0x5d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x80, 0x00, 0x00, 0x07, 0xd8, 0xa4, 0x00, 0x38, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x03, 0xe8, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0b, 0x01, 0x01, 0x02, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x09, 0x01, 0x01, 0x02, 0x01};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,8940765662646544802u));
	packet.setDest(std::make_uint128(18338657682652659712u,2067413912700624769u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest93) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0x4c, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0xe8, 0xe3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x80, 0x00, 0x00, 0x07, 0xd8, 0xa4, 0x00, 0x38, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x03, 0xe8, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0b, 0x01, 0x01, 0x02, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x09, 0x01, 0x01, 0x02, 0x01};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,5510013406568449447u));
	packet.setDest(std::make_uint128(18338657682652659712u,9252625643192011738u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest94) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0x4c, 0x01, 0x01, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0xde, 0xd6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x80, 0x00, 0x00, 0x07, 0xd8, 0xa4, 0x00, 0x38, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x03, 0xe8, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0b, 0x01, 0x01, 0x02, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x09, 0x01, 0x01, 0x02, 0x01};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,15864434363230491653u));
	packet.setDest(std::make_uint128(18338657682652659712u,2908403968511342810u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest95) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0x4c, 0x01, 0x01, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0xe7, 0xe2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x80, 0x00, 0x00, 0x07, 0xd8, 0xa4, 0x00, 0x38, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x03, 0xe8, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0b, 0x01, 0x01, 0x02, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x09, 0x01, 0x01, 0x02, 0x01};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,9252625643192011738u));
	packet.setDest(std::make_uint128(18338657682652659712u,5510013406568449447u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest96) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x25, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,5510013406568449447u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest97) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x03, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,4635624585554864598u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest98) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0xd6, 0xa5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x01};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,8940765662646544802u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest99) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x9d, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,2908403968511342810u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest100) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x3b, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,14746967710560628462u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest101) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,2067413912700624769u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest102) {
	parser::bytevector data = {0x03, 0x05, 0x00, 0x24, 0x01, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0xb9, 0x3c, 0x00, 0x00, 0x00, 0x02, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x80, 0x00, 0x00, 0x07, 0xd8, 0xa4, 0x00, 0x38};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,2067413912700624769u));
	packet.setDest(std::make_uint128(18338657682652659712u,8940765662646544802u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest103) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0xbd, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,15864434363230491653u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest104) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x3d, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,9252625643192011738u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest105) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0x7c, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x23, 0x6a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x03, 0x90, 0x65, 0x00, 0x68, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x03, 0xe8, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x0c, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x03, 0xe8, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x10, 0x01, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x12, 0x01, 0x01, 0x02, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x17, 0x01, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x19, 0x01, 0x01, 0x03, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,4635624585554864598u));
	packet.setDest(std::make_uint128(18338657682652659712u,10431855162518248275u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest106) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0x7c, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x13, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x03, 0x90, 0x65, 0x00, 0x68, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x03, 0xe8, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x0c, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x03, 0xe8, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x10, 0x01, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x12, 0x01, 0x01, 0x02, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x17, 0x01, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x19, 0x01, 0x01, 0x03, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,2908403968511342810u));
	packet.setDest(std::make_uint128(18338657682652659712u,15864434363230491653u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest107) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0x7c, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0xd6, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x03, 0x90, 0x65, 0x00, 0x68, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x03, 0xe8, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x0c, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x03, 0xe8, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x10, 0x01, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x12, 0x01, 0x01, 0x02, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x17, 0x01, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x19, 0x01, 0x01, 0x03, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,14746967710560628462u));
	packet.setDest(std::make_uint128(18338657682652659712u,4081570780723689266u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest108) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0x7c, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0xdf, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x03, 0x90, 0x65, 0x00, 0x68, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x03, 0xe8, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x0c, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x03, 0xe8, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x10, 0x01, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x12, 0x01, 0x01, 0x02, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x17, 0x01, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x19, 0x01, 0x01, 0x03, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,8940765662646544802u));
	packet.setDest(std::make_uint128(18338657682652659712u,2067413912700624769u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest109) {
	parser::bytevector data = {0x03, 0x04, 0x00, 0x7c, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x03, 0x90, 0x65, 0x00, 0x68, 0x02, 0x00, 0x01, 0x13, 0x01, 0x00, 0x03, 0xe8, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x0c, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x03, 0xe8, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x10, 0x01, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x12, 0x01, 0x01, 0x02, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x17, 0x01, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x19, 0x01, 0x01, 0x03, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,5510013406568449447u));
	packet.setDest(std::make_uint128(18338657682652659712u,9252625643192011738u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest110) {
	parser::bytevector data = {0x03, 0x05, 0x00, 0x38, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x91, 0xd4, 0x00, 0x00, 0x04, 0xb2, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0c, 0x01, 0x01, 0x01, 0x01, 0x80, 0x00, 0x00, 0x04, 0xe4, 0xd4, 0x00, 0x40, 0x00, 0x01, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x80, 0x00, 0x00, 0x07, 0xd8, 0xa4, 0x00, 0x38};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,4635624585554864598u));
	packet.setDest(std::make_uint128(18338657682652659712u,10431855162518248275u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest111) {
	parser::bytevector data = {0x03, 0x05, 0x00, 0x38, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x47, 0x75, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0b, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x01, 0x7a, 0xf2, 0x00, 0x40, 0x00, 0x01, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x03, 0x90, 0x65, 0x00, 0x68};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,10431855162518248275u));
	packet.setDest(std::make_uint128(18338657682652659712u,4635624585554864598u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest112) {
	parser::bytevector data = {0x03, 0x05, 0x00, 0x38, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0xa4, 0x8e, 0x00, 0x00, 0x04, 0xb8, 0x00, 0x08, 0x00, 0x00, 0x00, 0x12, 0x01, 0x01, 0x02, 0x01, 0x80, 0x00, 0x00, 0x03, 0xfc, 0x26, 0x00, 0x40, 0x00, 0x01, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01, 0x80, 0x00, 0x00, 0x07, 0x5f, 0xb9, 0x00, 0x68};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,14746967710560628462u));
	packet.setDest(std::make_uint128(18338657682652659712u,4081570780723689266u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest113) {
	parser::bytevector data = {0x03, 0x05, 0x00, 0x38, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0xea, 0xff, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x08, 0x00, 0x00, 0x00, 0x11, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x01, 0x89, 0xbd, 0x00, 0x40, 0x00, 0x01, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x03, 0x90, 0x65, 0x00, 0x68};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,4081570780723689266u));
	packet.setDest(std::make_uint128(18338657682652659712u,14746967710560628462u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest114) {
	parser::bytevector data = {0x03, 0x05, 0x00, 0x24, 0x01, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x01, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x03, 0x90, 0x65, 0x00, 0x68};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,2067413912700624769u));
	packet.setDest(std::make_uint128(18338657682652659712u,8940765662646544802u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest115) {
	parser::bytevector data = {0x03, 0x05, 0x00, 0x24, 0x01, 0x01, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x35, 0xc9, 0x00, 0x00, 0x00, 0x01, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x03, 0x90, 0x65, 0x00, 0x68};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,15864434363230491653u));
	packet.setDest(std::make_uint128(18338657682652659712u,2908403968511342810u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest116) {
	parser::bytevector data = {0x03, 0x05, 0x00, 0x24, 0x01, 0x01, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x3e, 0xd5, 0x00, 0x00, 0x00, 0x01, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x03, 0x90, 0x65, 0x00, 0x68};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,9252625643192011738u));
	packet.setDest(std::make_uint128(18338657682652659712u,5510013406568449447u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest117) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x68, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,10431855162518248275u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest118) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xf3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,4081570780723689266u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest119) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x3b, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,14746967710560628462u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest120) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x25, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,5510013406568449447u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest121) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x03, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,4635624585554864598u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest122) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0xd6, 0xa5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x01};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,8940765662646544802u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest123) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x9d, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,2908403968511342810u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest124) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,2067413912700624769u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest125) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0xbd, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,15864434363230491653u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest126) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x3d, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,9252625643192011738u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest127) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x68, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,10431855162518248275u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest128) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xf3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,4081570780723689266u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest129) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x25, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,5510013406568449447u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest130) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x9d, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,2908403968511342810u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest131) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x3b, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,14746967710560628462u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest132) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0xd6, 0xa5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x01};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,8940765662646544802u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest133) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x03, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,4635624585554864598u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest134) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,2067413912700624769u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest135) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0xbd, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,15864434363230491653u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest136) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x3d, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,9252625643192011738u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest137) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x68, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,10431855162518248275u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest138) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xf3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,4081570780723689266u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest139) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x03, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,4635624585554864598u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest140) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x9d, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,2908403968511342810u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest141) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x25, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,5510013406568449447u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest142) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x3b, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,14746967710560628462u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest143) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0xd6, 0xa5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x01};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,8940765662646544802u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest144) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,2067413912700624769u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest145) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0xbd, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,15864434363230491653u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}

TEST(ParserTest, ReconstructTest146) {
	parser::bytevector data = {0x03, 0x01, 0x00, 0x28, 0x01, 0x01, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x3d, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x01, 0x00, 0x01, 0x13, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02};
	parser::OSPFv3Packet packet(data);
	packet.setSource(std::make_uint128(18338657682652659712u,9252625643192011738u));
	packet.setDest(std::make_uint128(18375249429625044992u,5u));
	packet.updateValues();
	auto newData = packet.serialize();
	EXPECT_EQ(data, newData);
}
